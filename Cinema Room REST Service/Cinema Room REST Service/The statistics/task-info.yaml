type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/entity/error.java
  visible: true
  text: |
    package cinema.entity;

    public class error {
        private String error;

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        public error() {
        }

        public error(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/entity/seatInfo.java
  visible: true
  text: |
    package cinema.entity;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class seatInfo {
        private int row;
        private int column;
        private int price;

        @JsonIgnore
        private boolean isbooked;
        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public boolean isIsbooked() {
            return isbooked;
        }

        public void setIsbooked(boolean isbooked) {
            this.isbooked = isbooked;
        }

        public seatInfo(int row, int column, int price, boolean isbooked) {
            this.row = row;
            this.column = column;
            this.price = price;
            this.isbooked = isbooked;
        }
    }
  learner_created: true
- name: src/cinema/entity/seat.java
  visible: true
  text: |
    package cinema.entity;

    public class seat {
        private int row;
        private int column;

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public seat(){
        }
        public seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public  boolean equals(seat seat){
            if(this.getColumn()==seat.getColumn()&&this.getRow()==seat.getRow()){
                return true;
            }
            return false;
        }
    }
  learner_created: true
- name: src/cinema/entity/returnsuccess.java
  visible: true
  text: |
    package cinema.entity;

    public class returnsuccess {
    }
  learner_created: true
- name: src/cinema/entity/responseBody.java
  visible: true
  text: |
    package cinema.entity;

    import java.util.List;

    public class responseBody {
        private int total_rows;
        private int total_columns;
        private List<seatInfo> available_seats;

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<seatInfo> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<seatInfo> available_seats) {
            this.available_seats = available_seats;
        }

        public responseBody() {
        }

        public responseBody(int total_rows, int total_columns, List<seatInfo> available_seats) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats = available_seats;
        }
    }
  learner_created: true
- name: src/cinema/entity/token.java
  visible: true
  text: |
    package cinema.entity;

    public class token {
        String token;

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public token() {
        }

        public token(String token) {
            this.token = token;
        }
    }
  learner_created: true
- name: src/cinema/controller/mainController.java
  visible: true
  text: |-
    package cinema.controller;

    import cinema.entity.*;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.List;
    import java.util.concurrent.ConcurrentHashMap;

    import static java.util.UUID.randomUUID;

    @RestController
    public class mainController {
       static final cinema cinema = new cinema(9,9);
       static final ConcurrentHashMap concurrentHashMap = new ConcurrentHashMap<String, seatInfo>();
        @GetMapping("/seats")
        public cinema getSeats() {
            return cinema;
        }

        @PostMapping("/purchase")
        public Object getPurchase(@RequestBody seat seat) {
            if(seat.getRow()>9||seat.getColumn()>9||seat.getRow()<1||seat.getColumn()<1){
                return new ResponseEntity<>(new error("The number of a row or a column is out of bounds!"), HttpStatus.BAD_REQUEST);
            }else {
                for (seatInfo element : cinema.getAvailable_seats()) {
                    if (element.getRow()==seat.getRow()&&element.getColumn()==seat.getColumn()&&element.isIsbooked()==false) {
                        element.setIsbooked(true);
                        String token = String.valueOf(randomUUID());
                        concurrentHashMap.put(token,element);
                        String ticket = "{\n\t\"token\": \""+token+"\",\n\t\"ticket\": { \n\t\t\"row\": "+String.valueOf(seat.getRow())+",\n\t\t\"column\": "+
                                String.valueOf(seat.getColumn())+",\n\t\t\"price\": "+String.valueOf((seat.getRow() < 5) ? 10 : 8)+"\n\t} \n}";
                        return new ResponseEntity<>(ticket, HttpStatus.OK);
                    }
                }
                return new ResponseEntity<>(new error("The ticket has been already purchased!"), HttpStatus.BAD_REQUEST);
            }
        }

        @PostMapping("/return")
        public Object getReturn(@RequestBody token token){
            seatInfo seatReturn = (seatInfo) concurrentHashMap.get(token.getToken());
            if(seatReturn!=null){
                concurrentHashMap.remove(token.getToken());
                seatReturn.setIsbooked(false);
                String ticket = "{\n\t\"returned_ticket\": { \n\t\t\"row\": "+String.valueOf(seatReturn.getRow())+",\n\t\t\"column\": "+
                        String.valueOf(seatReturn.getColumn())+",\n\t\t\"price\": "+String.valueOf((seatReturn.getRow() < 5) ? 10 : 8)+"\n\t} \n}";
                return new ResponseEntity<>(ticket, HttpStatus.OK);
            }else{
                return new ResponseEntity<>(new error("Wrong token!"), HttpStatus.BAD_REQUEST);
            }
        }
    }
  learner_created: true
- name: src/cinema/entity/cinema.java
  visible: true
  text: |
    package cinema.entity;

    import java.util.ArrayList;
    import java.util.LinkedList;
    import java.util.List;

    public class cinema {
        private int total_rows;
        private int total_columns;
        private List<seatInfo> available_seats;

        public cinema(){

        }

        public cinema(int total_rows,int total_columns){
            this.total_rows=9;
            this.total_columns=9;
            available_seats= new ArrayList<seatInfo>();
            for(int i=0; i<9; i++){
                for(int j=0; j<9; j++){
                    if(i<4) {
                        available_seats.add(new seatInfo(i + 1, j + 1,10,false ));
                    }else{
                        available_seats.add(new seatInfo(i + 1, j + 1,8,false ));
                    }

                }
            }
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<seatInfo> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<seatInfo> available_seats) {
            this.available_seats = available_seats;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 20 Sep 2022 09:23:34 UTC
record: -1
